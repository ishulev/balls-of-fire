{
	"subcontent": {
		"interests": {
			"frontend": "<p>I do believe that, as with everything in life, web development is a constant learning process. I once thought that front-end was the easiest of a 3-layered model that I had in my head, regarding programming. The second level was back-end and the most complex – software development.</p><p>I was associating front-end with HTML, styled with CSS, optionally sprinkled with a little JavaScript magic for DOM manipulations. The back-end was where the real logic was laying. Back in the day, that may used to be the case [insert link]. Ultimately, the culmination in complexity was building a desktop application. Therefore, the plan was simple – don't pay too much attention to the simple stuff (the first layer), but enough to build a website. Focus more on the server script, because it would ultimately prepare me for the real deal – software development. So everything I did was just to get me closer to that ultimate goal. The reason for me waning to be a software developer was  the perceived title and the possible salary (in my head a software developer was better than a web developer in both social status and renumeration).</p><p>In my pursuit for the possible gain, I failed to enjoy the present moment of learning how to code with web technologies. A client-side application can be as complex as I want it to be and with the advancement of technologies, websites and desktop programs become more and more indistinguishable in the functionality they do and the user experience they deliver.</p>",
			"workflow": "<h4>Task managers</h4><p>I am constantly amazed, of how much there is to improve, in the way I work. Spending a few hours in building a JS file, could save a tremendous amount of time in the long run and let you focus on the functional code of the application and let the task runner do the rest.</p><h4>Programming standards</h4><p>Whenever I took my first steps in different aspects of programming, I just wanted my code to work. I didn't care about semantics, readability or re-usability. I only wanted something to happen and I did not care about the cost of getting it.</p><p>The more experience I gain, the more I realize the importance of well-written code. I don't want to remind myself of the countless “projects” I've made, because if I have to go to one and try to change, improve or even understand the code, it could prove to be a cumbersome task.</p><p>There are many experienced developers, who have realized the benefits of well-written code – regarding every language and framework used.</p><p>Just to mention a few: </p><ul><li><a href='//google.github.io/styleguide/htmlcssguide.xml'>HTML styleguide</a></li><li><a href='//smacss.com/'>Smacss</a> <a href='//sass-guidelin.es/'>CSS styleguide</a></li><li><a href='//google.github.io/styleguide/javascriptguide.xml'>JS styleguide</a>, <a href='//github.com/johnpapa/angular-styleguide'>Angular Styleguide</a></li></ul>"
		}
	}
}